
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "edm1"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "edm1-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('edm1')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("fillr")
> ### * fillr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fillr
> ### Title: fillr
> ### Aliases: fillr
> 
> ### ** Examples
> 
> fillr(c("a", "b", "...3", "c"))
[1] "a" "b" "b" "b" "b" "c"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fillr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("geo_min")
> ### * geo_min
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: geo_min
> ### Title: geo_min
> ### Aliases: geo_min
> 
> ### ** Examples
> 
> in_ <- data.frame(c(11, 33, 55), c(113, -143, 167))
> 
> in2_ <- data.frame(c(12, 55), c(115, 165))
> 
> print(geo_min(inpt_df=in_, established_df=in2_))
         X1       X2
1   245.266       NA
2 24200.143       NA
3        NA 127.7004
> 
> in_ <- data.frame(c(51, 23, 55), c(113, -143, 167), c(6, 5, 1))
> 
> in2_ <- data.frame(c(12, 55), c(115, 165), c(2, 5))
> 
> geo_min(inpt_df=in_, established_df=in2_)
        X1       X2
1       NA 4343.720
2 26465.63       NA
3       NA 5825.517
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("geo_min", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("globe")
> ### * globe
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: globe
> ### Title: globe
> ### Aliases: globe
> 
> ### ** Examples
> 
> globe(lat_f=23, long_f=112, alt_f=NA, lat_n=c(2, 82), long_n=c(165, -55), alt_n=NA) 
[1] 6342.844 7059.080
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("globe", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("groupr_df")
> ### * groupr_df
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: groupr_df
> ### Title: groupr_df
> ### Aliases: groupr_df
> 
> ### ** Examples
> 
> interactive()
[1] FALSE
> df1 <- data.frame(c(1, 2, 1), c(45, 22, 88), c(44, 88, 33))
> 
> val_lst <- list(list(c(1), c(1)), list(c(2)), list(c(44)))
> 
> condition_lst <- list(c(">", "<"), c("%%"), c("=="))
> 
> conjunction_lst <- list(c("|"), c(), c())
> 
> rtn_val_pos <- c("+", "+", "+")
> 
> groupr_df(inpt_df=df1, val_lst=val_lst, condition_lst=condition_lst, 
+ conjunction_lst=conjunction_lst, rtn_val_pos=rtn_val_pos)
    X1 X2 X3
1 <NA>  +  +
2    +  +  +
3 <NA>  +  +
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("groupr_df", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("nestr_df1")
> ### * nestr_df1
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: nestr_df1
> ### Title: nestr_df1
> ### Aliases: nestr_df1
> 
> ### ** Examples
> 
> nestr_df1(inptf_df=data.frame(c(1, 2, 1), c(1, 5, 7)), 
+ inptt_pos_df=data.frame(c(4, 4, 3), c(2, 1, 2)), 
+ inptt_neg_df=data.frame(c(44, 44, 33), c(12, 12, 12)), 
+ nestr_df=data.frame(c(TRUE, FALSE, TRUE), c(FALSE, FALSE, TRUE)), yes_val=TRUE) 
  c.1..2..1. c.1..5..7.
1          4         12
2         44         12
3          3          2
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("nestr_df1", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("nestr_df2")
> ### * nestr_df2
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: nestr_df2
> ### Title: nestr_df2
> ### Aliases: nestr_df2
> 
> ### ** Examples
> 
> nestr_df2(inptf_df=data.frame(c(1, 2, 1), c(1, 5, 7)), rtn_pos="yes", 
+ rtn_neg="no", nestr_df=data.frame(c(TRUE, FALSE, TRUE), c(FALSE, FALSE, TRUE)), yes_val=TRUE) 
  c.1..2..1. c.1..5..7.
1        yes         no
2         no         no
3        yes        yes
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("nestr_df2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ptrn_switchr")
> ### * ptrn_switchr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ptrn_switchr
> ### Title: ptrn_switchr
> ### Aliases: ptrn_switchr
> 
> ### ** Examples
> 
> ptrn_switchr(inpt_l=c("2022-01-11", "2022-01-14", "2022-01-21", 
+ "2022-01-01"), f_idx_l=c(1, 2, 3), t_idx_l=c(3, 2, 1))
[1] "11-01-2022" "14-01-2022" "21-01-2022" "01-01-2022"
> ptrn_switchr(inpt_l=c("2022-01-11", "2022-01-14", "2022-01-21", 
+ "2022-01-01"), f_idx_l=c(1), default_val="ee")
[1] "ee-01-11" "ee-01-14" "ee-01-21" "ee-01-01"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ptrn_switchr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ptrn_twkr")
> ### * ptrn_twkr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ptrn_twkr
> ### Title: ptrn_twkr
> ### Aliases: ptrn_twkr
> 
> ### ** Examples
> 
> library("stringr")
> v <- c("2012-06-22", "2012-06-23", "2022-09-12", "2022")
> ptrn_twkr(inpt_l=v, depth="max", sep="-", default_val="00", add_sep=TRUE)
[1] "2012-06-22" "2012-06-23" "2022-09-12" "2022-00-00"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ptrn_twkr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:stringr’

> nameEx("v_to_df")
> ### * v_to_df
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: v_to_df
> ### Title: v_to_df
> ### Aliases: v_to_df
> 
> ### ** Examples
> 
> library("stringr")
> v <- c("aa-yy-uu", "zz-gg-hhh", "zz-gg-hhh", "zz-gg-hhh")
> v_to_df(inpt_v=v, sep="-")
  pre_v pre_v pre_v
1    aa    yy    uu
2    zz    gg   hhh
3    zz    gg   hhh
4    zz    gg   hhh
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("v_to_df", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:stringr’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.305 0.01 0.315 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
